<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Starling Murmuration Visualizer</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: transparent;
    }
    canvas {
      display: block;
      background: transparent;
    }
  </style>
</head>
<body>
  <canvas id="visualizer"></canvas>

  <script>
    const canvas = document.getElementById('visualizer');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    const flockSize = 150;
    const flock = [];
    const MIN_DISTANCE = 20;
    const MAX_DISTANCE = 200;

    class Bird {
      constructor() {
        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        this.x = centerX + (Math.random() - 0.5) * 100;
        this.y = centerY + (Math.random() - 0.5) * 100;
        this.vx = Math.random() * 2 - 1;
        this.vy = Math.random() * 2 - 1;
        this.size = 2 + Math.random() * 2;
        this.color = 'black';
      }

      update(avgAudio, flock) {
        let avoidX = 0, avoidY = 0;
        let centerX = 0, centerY = 0;
        let alignVX = 0, alignVY = 0;
        let nearbyCount = 0, avoidCount = 0;

        for (const other of flock) {
          if (other === this) continue;
          const dx = other.x - this.x;
          const dy = other.y - this.y;
          const dist = Math.hypot(dx, dy);

          if (dist < MIN_DISTANCE) {
            avoidX -= dx;
            avoidY -= dy;
            avoidCount++;
          } else if (dist < MAX_DISTANCE) {
            centerX += other.x;
            centerY += other.y;
            alignVX += other.vx;
            alignVY += other.vy;
            nearbyCount++;
          }
        }

        if (avoidCount > 0) {
          this.vx += avoidX / avoidCount * 0.05;
          this.vy += avoidY / avoidCount * 0.05;
        }

        if (nearbyCount > 0) {
          centerX /= nearbyCount;
          centerY /= nearbyCount;
          this.vx += (centerX - this.x) * 0.003;
          this.vy += (centerY - this.y) * 0.003;

          this.vx += (alignVX / nearbyCount - this.vx) * 0.02;
          this.vy += (alignVY / nearbyCount - this.vy) * 0.02;
        }

        this.vx += (Math.random() - 0.5) * 0.1;
        this.vy += (Math.random() - 0.5) * 0.1;

        const speedLimit = Math.max(0.5, avgAudio / 50);
        const speed = Math.hypot(this.vx, this.vy);
        if (speed > speedLimit) {
          this.vx = (this.vx / speed) * speedLimit;
          this.vy = (this.vy / speed) * speedLimit;
        }

        this.x += this.vx;
        this.y += this.vy;

        // Wrap edges
        if (this.x < 0) this.x = canvas.width;
        if (this.x > canvas.width) this.x = 0;
        if (this.y < 0) this.y = canvas.height;
        if (this.y > canvas.height) this.y = 0;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }
    }

    for (let i = 0; i < flockSize; i++) {
      flock.push(new Bird());
    }

    async function initVisualizer() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const source = audioCtx.createMediaStreamSource(stream);
        const analyser = audioCtx.createAnalyser();

        analyser.fftSize = 256;
        const bufferLength = analyser.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);

        source.connect(analyser);

        function draw() {
          requestAnimationFrame(draw);
          analyser.getByteFrequencyData(dataArray);
          const avg = dataArray.reduce((a, b) => a + b, 0) / bufferLength;

          ctx.clearRect(0, 0, canvas.width, canvas.height);

          for (const bird of flock) {
            bird.update(avg, flock);
            bird.draw();
          }
        }

        draw();
      } catch (err) {
        alert('Microphone access denied or not supported.');
        console.error(err);
      }
    }

    initVisualizer();
  </script>
</body>
</html>
